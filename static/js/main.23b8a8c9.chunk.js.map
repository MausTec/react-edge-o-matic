{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["defaultState","ip","state","config","mode","modeDisplay","info","deviceName","firmwareVersion","hardwareVersion","deviceSerial","status","wifi","sd","wsLog","_serial_cb","DeviceContext","connect","send","onSerialCmd","dir","ReadingsContext","readings","lastReading","DeviceProvider","deviceContext","readingsContext","configList","serialCmd","wifiStatus","sdStatus","cbDir","setReadingsState","this","setDeviceState","cbInfo","data","serial","cbConfigList","cbSerialCmd","text","nonce","cbWifiStatus","cbSdStatus","cbReadings","cbMode","path","cb","mknonce","Math","Object","JSON","handleWsOpen","streamReadings","console","handleWsClose","handleWsMessage","_this","doc","e","recv","setSerialCb","fn","render","wsProtocol","window","value","url","onOpen","onClose","ref","debug","onMessage","props","Component","ConnectionForm","onConnect","useState","setIp","onSubmit","preventDefault","type","placeholder","onChange","target","renderDeviceState","className","stringify","undefined","Consumer","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.23b8a8c9.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport Websocket from 'react-websocket'\n\nexport const DeviceMode = {\n  MANUAL: 'manual',\n  AUTOMATIC: 'automatic'\n}\n\nexport const ConnectionState = {\n  DISCONNECTED: 'disconnected',\n  CONNECTING: 'connecting',\n  CONNECTED: 'connected'\n}\n\nconst defaultState = {\n  ip: null,\n  state: ConnectionState.DISCONNECTED,\n  config: {},\n  mode: '',\n  modeDisplay: '',\n  info: {\n    deviceName: '',\n    firmwareVersion: '',\n    hardwareVersion: '',\n    deviceSerial: ''\n  },\n  status: {\n    wifi: {},\n    sd: {}\n  },\n  wsLog: [],\n  _serial_cb: () => {}\n}\n\nconst DeviceContext = React.createContext({\n  ...defaultState,\n  connect: (ip) => {},\n  send: (data) => {},\n  onSerialCmd: (fn) => {},\n  dir: (path, cb) => {}\n})\n\nconst ReadingsContext = React.createContext({\n  readings: [],\n  lastReading: {}\n})\n\nclass DeviceProvider extends Component {\n  constructor(props) {\n    super(props)\n\n    this.ws = null\n\n    this.state = {\n      deviceContext: {\n        ...defaultState,\n        connect: this.connect.bind(this),\n        send: this.send.bind(this),\n        onSerialCmd: this.setSerialCb.bind(this),\n        dir: this.dir.bind(this)\n      },\n      readingsContext: {\n        readings: [],\n        lastReading: {}\n      }\n    }\n\n    this.nonceCb = {}\n\n    /**\n     * Register functions here to handle messages from the\n     * device. These should point to methods in this object.\n     */\n    this.callbacks = {\n      info: this.cbInfo,\n      configList: this.cbConfigList,\n      serialCmd: this.cbSerialCmd,\n      wifiStatus: this.cbWifiStatus,\n      sdStatus: this.cbSdStatus,\n      readings: this.cbReadings,\n      mode: this.cbMode,\n      dir: this.cbDir\n    }\n\n    this.handleWsOpen = this.handleWsOpen.bind(this)\n    this.handleWsClose = this.handleWsClose.bind(this)\n    this.handleWsMessage = this.handleWsMessage.bind(this)\n  }\n\n  setReadingsState(state = {}) {\n    this.setState({\n      readingsContext: { ...this.state.readingsContext, ...state }\n    })\n  }\n\n  setDeviceState(state = {}) {\n    this.setState({ deviceContext: { ...this.state.deviceContext, ...state } })\n  }\n\n  /*\n   * Register Callbacks Here\n   */\n\n  cbDir(data) {\n    // noop - this is an nonce-usually command.\n  }\n\n  cbInfo(data) {\n    // {device: \"Edge-o-Matic 3000\", serial: \"\", hwVersion: \"\", fwVersion: \"0.1.2\"}\n    this.setDeviceState({\n      info: {\n        deviceName: data.device,\n        firmwareVersion: data.fwVersion,\n        hardwareVersion: data.hwVersion,\n        deviceSerial: data.serial\n      }\n    })\n  }\n\n  cbConfigList(config) {\n    this.setDeviceState({ config })\n  }\n\n  cbSerialCmd({ text, nonce }) {\n    if (this.state.deviceContext._serial_cb) {\n      this.state.deviceContext._serial_cb({ text, nonce })\n    }\n  }\n\n  cbWifiStatus(status) {\n    this.setDeviceState({\n      status: { ...this.state.deviceContext.status, wifi: status }\n    })\n  }\n\n  cbSdStatus(status) {\n    this.setDeviceState({\n      status: { ...this.state.deviceContext.status, sd: status }\n    })\n  }\n\n  cbReadings(data) {\n    const readings = [...this.state.readingsContext.readings]\n\n    if (readings.length >= 100) {\n      readings.shift()\n    }\n\n    readings.push(data)\n\n    this.setReadingsState({\n      readings: readings,\n      lastReading: data\n    })\n  }\n\n  cbMode(data) {\n    this.setDeviceState({\n      mode: data.text.toLowerCase(),\n      modeDisplay: data.text\n    })\n  }\n\n  /*\n   * Public command helpers, which should* be abstracted to another module?\n   */\n  dir(path, cb) {\n    this.send({\n      dir: {\n        path,\n        nonce: cb\n      }\n    })\n  }\n\n  /*\n   * Internal State Things\n   */\n\n  mknonce(cb) {\n    const nonce = Math.floor(Math.random() * 1000000)\n    this.nonceCb[nonce] = cb\n    return nonce\n  }\n\n  send(data) {\n    if (this.ws) {\n      // Filter out nonce funcs:\n      Object.keys(data).forEach((k) => {\n        if (data[k] && typeof data[k].nonce === 'function') {\n          data[k].nonce = this.mknonce(data[k].nonce)\n        }\n      })\n      this.setDeviceState({\n        wsLog: [...this.state.deviceContext.wsLog, { send: data }]\n      })\n      this.ws.sendMessage(JSON.stringify(data))\n    }\n  }\n\n  connect(ip) {\n    let state = 'connecting'\n\n    if (!ip) {\n      state = 'disconnected'\n    } else if (ip === this.state.deviceContext.ip) {\n      state = this.state.deviceContext.state\n    }\n\n    this.setDeviceState({ ip, state })\n  }\n\n  handleWsOpen() {\n    this.setDeviceState({ state: 'connected' })\n    this.send({ streamReadings: true })\n    this.send({ info: null })\n    this.send({ configList: null })\n    console.log('Connected')\n  }\n\n  handleWsClose() {\n    this.setDeviceState({ state: 'disconnected' })\n    console.log('Closed.')\n  }\n\n  handleWsMessage(data) {\n    const _this = this\n    let doc\n    try {\n      doc = JSON.parse(data)\n    } catch (e) {\n      doc = { data }\n      console.warn(e)\n    }\n\n    if (!doc.readings) {\n      const wsLog = [...this.state.deviceContext.wsLog]\n\n      if (wsLog.length >= 100) {\n        wsLog.shift()\n      }\n\n      this.setDeviceState({ wsLog: [...wsLog, { recv: data }] })\n    }\n\n    Object.keys(doc).forEach((cmd) => {\n      const data = doc[cmd]\n\n      // Automatically handle some common keys:\n      if (data) {\n        if (data.nonce && this.nonceCb[data.nonce]) {\n          this.nonceCb[data.nonce](data)\n          delete this.nonceCb[data.nonce]\n        }\n\n        if (data.error) {\n          console.error(data.error)\n          // TODO: Pass along error here\n        }\n      }\n\n      if (this.callbacks[cmd]) {\n        this.callbacks[cmd].bind(_this)(data)\n      } else {\n        console.warn('Received unknown command from device: ', cmd, doc[cmd])\n      }\n    })\n  }\n\n  setSerialCb(fn) {\n    this.setDeviceState({ _serial_cb: fn })\n  }\n\n  render() {\n    const wsProtocol = 'ws' + window.location.protocol.slice(4)\n\n    return (\n      <DeviceContext.Provider value={this.state.deviceContext}>\n        <ReadingsContext.Provider value={this.state.readingsContext}>\n          {this.state.deviceContext.ip && (\n            <Websocket\n              url={wsProtocol + '//' + this.state.deviceContext.ip}\n              onOpen={this.handleWsOpen}\n              onClose={this.handleWsClose}\n              ref={(websocket) => (this.ws = websocket)}\n              debug\n              onMessage={this.handleWsMessage}\n            />\n          )}\n          {this.props.children}\n        </ReadingsContext.Provider>\n      </DeviceContext.Provider>\n    )\n  }\n}\n\nexport default DeviceProvider\nexport { DeviceContext, ReadingsContext }\n","import React, { useState } from 'react'\nimport DeviceProvider from 'react-edge-o-matic'\nimport { DeviceContext, ReadingsContext } from 'react-edge-o-matic'\n\nconst ConnectionForm = ({ onConnect }) => {\n  const [ip, setIp] = useState(\"\");\n\n  const handleConnect = (e) => {\n    e.preventDefault();\n    onConnect(ip);\n  }\n\n  const handleChange = (e) => {\n    e.preventDefault();\n    setIp(e.target.value);\n  }\n\n  return (<form onSubmit={handleConnect}>\n    <input type={'text'} placeholder={'Device IP'} value={ip} onChange={handleChange} />\n    <input type={'submit'} />\n  </form>)\n}\n\nconst renderDeviceState = (state) => {\n  return (\n    <div className={'card'}>\n      <pre>\n        <code>{ JSON.stringify(state, undefined, 2) }</code>\n      </pre>\n\n      <h2>Last Reading:</h2>\n      <ReadingsContext.Consumer>\n        { ({ lastReading }) => <pre>\n          <code>{ JSON.stringify(lastReading, undefined, 2) }</code>\n        </pre>}\n      </ReadingsContext.Consumer>\n\n      { state.state === \"disconnected\" && <ConnectionForm onConnect={state.connect} /> }\n      { state.state === \"connecting\" && <div>Connecting...</div> }\n    </div>\n  )\n}\n\nconst App = () => {\n  return <DeviceProvider>\n    <DeviceContext.Consumer>\n      { renderDeviceState }\n    </DeviceContext.Consumer>\n  </DeviceProvider>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}